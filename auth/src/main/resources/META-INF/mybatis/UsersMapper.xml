<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.github.chenhao96.dao.UsersMapper">

    <resultMap id="BaseResultMap" type="org.steven.chen.model.po.Users">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="photo" property="photo" jdbcType="VARCHAR"/>
        <result column="userName" property="userName" jdbcType="VARCHAR"/>
        <result column="nikeName" property="nikeName" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="updateAt" property="updateAt" jdbcType="INTEGER"/>
        <result column="createAt" property="createAt" jdbcType="INTEGER"/>
        <result column="roleName_id" property="roleNameId" jdbcType="INTEGER"/>
        <result column="phoneNumber" property="phoneNumber" jdbcType="VARCHAR"/>
    </resultMap>

    <sql id="Base_Column_List">
      id, userName, nikeName, password, photo, phoneNumber, updateAt, createAt, roleName_id
    </sql>

    <select id="selectUserPasswordById" resultType="java.lang.String" parameterType="java.lang.Integer">
        select password from QPManagerPlatformDB.dbo.users where id = #{id,jdbcType=INTEGER}
    </select>

    <select id="selectUserPhotoByUserName" resultType="java.lang.String" parameterType="java.lang.String">
        select photo from QPManagerPlatformDB.dbo.users where userName = #{userName,jdbcType=VARCHAR}
    </select>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from QPManagerPlatformDB.dbo.users where id = #{id,jdbcType=INTEGER}
    </select>

    <select id="selectByUserName" resultMap="BaseResultMap" parameterType="java.lang.String">
        select
        <include refid="Base_Column_List"/>
        from QPManagerPlatformDB.dbo.users where userName = #{userName,jdbcType=VARCHAR}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
      delete from QPManagerPlatformDB.dbo.users where id = #{id,jdbcType=INTEGER}
    </delete>

    <delete id="deleteByUserName" parameterType="java.lang.String">
      delete from QPManagerPlatformDB.dbo.users where userName = #{userName,jdbcType=VARCHAR}
    </delete>

    <insert id="insertSelective" parameterType="com.github.chenhao96.model.po.Users" useGeneratedKeys="true" keyProperty="id"
            keyColumn="id">
        insert into QPManagerPlatformDB.dbo.users
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userName != null">
                userName,
            </if>
            <if test="nikeName != null">
                nikeName,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="photo != null">
                photo,
            </if>
            <if test="phoneNumber != null">
                phoneNumber,
            </if>
            <if test="updateAt != null">
                updateAt,
            </if>
            <if test="createAt != null">
                createAt,
            </if>
            <if test="roleNameId != null">
                roleName_id,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userName != null">
                #{userName,jdbcType=VARCHAR},
            </if>
            <if test="nikeName != null">
                #{nikeName,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="photo != null">
                #{photo,jdbcType=VARCHAR},
            </if>
            <if test="phoneNumber != null">
                #{phoneNumber,jdbcType=VARCHAR},
            </if>
            <if test="updateAt != null">
                #{updateAt,jdbcType=INTEGER},
            </if>
            <if test="createAt != null">
                #{createAt,jdbcType=INTEGER},
            </if>
            <if test="roleNameId != null">
                #{roleNameId,jdbcType=INTEGER}
            </if>
        </trim>
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.github.chenhao96.model.po.Users">
        update QPManagerPlatformDB.dbo.users
        <set>
            <if test="userName != null">
                userName = #{userName,jdbcType=VARCHAR},
            </if>
            <if test="nikeName != null">
                nikeName = #{nikeName,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="photo != null">
                photo = #{photo,jdbcType=VARCHAR},
            </if>
            <if test="phoneNumber != null">
                phoneNumber = #{phoneNumber,jdbcType=VARCHAR},
            </if>
            <if test="updateAt != null">
                updateAt = #{updateAt,jdbcType=INTEGER},
            </if>
            <if test="roleNameId != null">
                roleName_id = #{roleNameId,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>

    <select id="userList" resultMap="BaseResultMap">
         select id,userName from QPManagerPlatformDB.dbo.users
    </select>

    <select id="countList" resultType="java.lang.Long" parameterType="com.github.chenhao96.model.bo.AdminBo">
        select count(id) from QPManagerPlatformDB.dbo.users
        <where>
            <if test="userName != null and userName != ''">
                <choose>
                    <when test="like == true or like == 'true'">
                        and userName like '%'+#{userName,jdbcType=VARCHAR}+'%'
                    </when>
                    <otherwise>
                        and userName = #{userName,jdbcType=VARCHAR}
                    </otherwise>
                </choose>
            </if>
            <if test="nikeName != null and nikeName != ''">
                <choose>
                    <when test="like == true or like == 'true'">
                        and nikeName like '%'+#{nikeName,jdbcType=VARCHAR}+'%'
                    </when>
                    <otherwise>
                        and nikeName = #{nikeName,jdbcType=VARCHAR}
                    </otherwise>
                </choose>
            </if>
            <if test="phoneNumber != null and phoneNumber != ''">
                <choose>
                    <when test="like == true or like == 'true'">
                        and phoneNumber like '%'+#{phoneNumber,jdbcType=VARCHAR}+'%'
                    </when>
                    <otherwise>
                        and phoneNumber = #{phoneNumber,jdbcType=VARCHAR}
                    </otherwise>
                </choose>
            </if>
            <if test="roleNameId != null and roleNameId != ''">
                and roleName_id = #{roleNameId,jdbcType=INTEGER}
            </if>
            <if test="updateAt != null and updateAt != ''">
                and updateAt = #{updateAt,jdbcType=INTEGER}
            </if>
            <if test="createAt != null and createAt != ''">
                and createAt = #{createAt,jdbcType=INTEGER}
            </if>
        </where>
    </select>

    <resultMap id="AdminVoMap" type="com.github.chenhao96.model.vo.AdminVo">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="userName" property="userName" jdbcType="VARCHAR"/>
        <result column="nikeName" property="nikeName" jdbcType="VARCHAR"/>
        <result column="roleName" property="roleName" jdbcType="VARCHAR"/>
        <result column="phoneNumber" property="phoneNumber" jdbcType="VARCHAR"/>
        <result column="updateAtStr" property="updateAtStr" jdbcType="VARCHAR"/>
        <result column="createAtStr" property="createAtStr" jdbcType="VARCHAR"/>
    </resultMap>

    <select id="pageList" resultMap="AdminVoMap" parameterType="com.github.chenhao96.model.bo.AdminBo">
        select id, userName, nikeName, phoneNumber, roleName, updateAtStr, createAtStr from (
        select ROW_NUMBER() Over(order by u.id) as rowId,
        u.id, u.userName, u.nikeName, u.phoneNumber, rn.roleName,
        u1.userName as updateAtStr,u2.userName as createAtStr
        from QPManagerPlatformDB.dbo.users u
        LEFT JOIN QPManagerPlatformDB.dbo.roleName rn on rn.id = u.roleName_id
        LEFT JOIN QPManagerPlatformDB.dbo.users u1 on u1.id = u.updateAt
        LEFT JOIN QPManagerPlatformDB.dbo.users u2 on u2.id = u.createAt
        <where>
            <if test="userName != null and userName != ''">
                <choose>
                    <when test="like == true or like == 'true'">
                        and u.userName like '%'+#{userName,jdbcType=VARCHAR}+'%'
                    </when>
                    <otherwise>
                        and u.userName = #{userName,jdbcType=VARCHAR}
                    </otherwise>
                </choose>
            </if>
            <if test="nikeName != null and nikeName != ''">
                <choose>
                    <when test="like == true or like == 'true'">
                        and u.nikeName like '%'+#{nikeName,jdbcType=VARCHAR}+'%'
                    </when>
                    <otherwise>
                        and u.nikeName = #{nikeName,jdbcType=VARCHAR}
                    </otherwise>
                </choose>
            </if>
            <if test="phoneNumber != null and phoneNumber != ''">
                <choose>
                    <when test="like == true or like == 'true'">
                        and u.phoneNumber like '%'+#{phoneNumber,jdbcType=VARCHAR}+'%'
                    </when>
                    <otherwise>
                        and u.phoneNumber = #{phoneNumber,jdbcType=VARCHAR}
                    </otherwise>
                </choose>
            </if>
            <if test="roleNameId != null and roleNameId != ''">
                and u.roleName_id = #{roleNameId,jdbcType=INTEGER}
            </if>
            <if test="updateAt != null and updateAt != ''">
                and u.updateAt = #{updateAt,jdbcType=INTEGER}
            </if>
            <if test="createAt != null and createAt != ''">
                and u.createAt = #{createAt,jdbcType=INTEGER}
            </if>
        </where>
        ) as tmp where rowId between #{page,jdbcType=INTEGER} and #{rows,jdbcType=INTEGER}
        <if test="sort != null and sort != '' and order != null and order != ''">
            order by ${sort} ${order}
        </if>
    </select>

    <delete id="batchDelete">
        delete from QPManagerPlatformDB.dbo.users where id in
        <foreach collection="array" item="userId" index="index" open="(" close=")" separator=",">
            #{userId,jdbcType=INTEGER}
        </foreach>
    </delete>
</mapper>