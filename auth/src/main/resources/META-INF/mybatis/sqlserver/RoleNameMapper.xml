<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.github.chenhao96.dao.RoleNameMapper">

    <resultMap id="BaseResultMap" type="com.github.chenhao96.model.po.RoleName">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="roleName" property="roleName" jdbcType="VARCHAR"/>
        <result column="updateAt" property="updateAt" jdbcType="INTEGER"/>
        <result column="createAt" property="createAt" jdbcType="INTEGER"/>
    </resultMap>

    <sql id="Base_Column_List">
      id, roleName, updateAt, createAt
    </sql>

    <select id="selectByCreateAt" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from QPManagerPlatformDB.dbo.roleName
        where createAt = #{createAt,jdbcType=INTEGER}
    </select>

    <select id="queryRoleNameById" resultType="java.lang.String" parameterType="java.lang.Integer">
        select roleName from QPManagerPlatformDB.dbo.roleName where id = #{id,jdbcType=INTEGER}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
      delete from QPManagerPlatformDB.dbo.roleName where id = #{id,jdbcType=INTEGER}
    </delete>

    <insert id="insert" parameterType="com.github.chenhao96.model.po.RoleName">
        insert into QPManagerPlatformDB.dbo.roleName (roleName, updateAt, createAt)
        values (#{roleName,jdbcType=VARCHAR}, #{updateAt,jdbcType=INTEGER}, #{createAt,jdbcType=INTEGER})
    </insert>

    <update id="updateByPrimaryKey" parameterType="com.github.chenhao96.model.po.RoleName">
        update QPManagerPlatformDB.dbo.roleName
        set roleName = #{roleName,jdbcType=VARCHAR}, updateAt = #{updateAt,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </update>

    <select id="countList" resultType="java.lang.Long" parameterType="com.github.chenhao96.model.bo.RoleNameBo">
        select count(id) from QPManagerPlatformDB.dbo.roleName
        <where>
            <if test="roleName != null and roleName != ''">
                <choose>
                    <when test="like == true or like == 'true'">
                        and roleName like '%'+#{roleName,jdbcType=VARCHAR}+'%'
                    </when>
                    <otherwise>
                        and roleName = #{roleName,jdbcType=VARCHAR}
                    </otherwise>
                </choose>
            </if>
            <if test="updateAt != null and updateAt != ''">
                and updateAt = #{updateAt,jdbcType=INTEGER}
            </if>
            <if test="createAt != null and createAt != ''">
                and createAt = #{createAt,jdbcType=INTEGER}
            </if>
        </where>
    </select>

    <resultMap id="RoleNameVoMap" type="com.github.chenhao96.model.vo.RoleNameVo">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="roleName" property="roleName" jdbcType="VARCHAR"/>
        <result column="updateAtStr" property="updateAtStr" jdbcType="VARCHAR"/>
        <result column="createAtStr" property="createAtStr" jdbcType="VARCHAR"/>
    </resultMap>

    <select id="pageList" resultMap="RoleNameVoMap" parameterType="com.github.chenhao96.model.bo.RoleNameBo">
        select id,roleName,updateAtStr,createAtStr from (select ROW_NUMBER() Over(order by roleName.id) as rowId,
        roleName.id, roleName.roleName, u.userName as updateAtStr, u2.userName as createAtStr
        from QPManagerPlatformDB.dbo.roleName roleName
        LEFT JOIN QPManagerPlatformDB.dbo.users u on u.id = roleName.updateAt
        LEFT JOIN QPManagerPlatformDB.dbo.users u2 on u2.id = roleName.createAt
        <where>
            <if test="roleName != null and roleName != ''">
                <choose>
                    <when test="like == true or like == 'true'">
                        and roleName.roleName like '%'+#{roleName,jdbcType=VARCHAR}+'%'
                    </when>
                    <otherwise>
                        and roleName.roleName = #{roleName,jdbcType=VARCHAR}
                    </otherwise>
                </choose>
            </if>
            <if test="updateAt != null and updateAt != ''">
                and roleName.updateAt = #{updateAt,jdbcType=INTEGER}
            </if>
            <if test="createAt != null and createAt != ''">
                and roleName.createAt = #{createAt,jdbcType=INTEGER}
            </if>
        </where>
        ) as tmp where rowId between #{page,jdbcType=INTEGER} and #{rows,jdbcType=INTEGER}
        <if test="sort != null and sort != '' and order != null and order != ''">
            order by ${sort} ${order}
        </if>
    </select>

    <select id="roleList" resultMap="BaseResultMap">
        select id,roleName from QPManagerPlatformDB.dbo.roleName
    </select>

    <delete id="batchDelete">
        DELETE from QPManagerPlatformDB.dbo.roleName where id in
        <foreach collection="array" item="roleId" index="index" open="(" close=")" separator=",">
            #{roleId,jdbcType=INTEGER}
        </foreach>
    </delete>
</mapper>